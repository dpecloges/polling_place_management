package com.ots.dpel.global.exceptions;

import com.ots.dpel.global.errors.ErrorMessage;
import com.ots.dpel.global.errors.ErrorReport;

import java.util.ArrayList;
import java.util.List;

/**
 * It is the top level exception for this application. It is advised that
 * application exceptions extend this class when they will be thrown by REST
 * controllers.
 */
public class DpRuntimeException extends RuntimeException {
    
    private static final long serialVersionUID = 1L;
    private List<ErrorMessage> errors = new ArrayList<ErrorMessage>();
    private String description = "";
    
    public DpRuntimeException() {
    }
    
    /**
     * Exception constructor
     * @param message a user friendly message which will construct an
     *                {@link ErrorMessage} in error message list.
     */
    public DpRuntimeException(String message) {
        this("", message);
    }
    
    /**
     * Exception constructor
     * @param code    an application error code. Valid values are descriptions of
     *                {@link CrError} errors which are generated by
     *                {@link CrError#description() YdataError.description()}
     *                method.
     *                <p>
     *                Example: {@link REPORT_INVALID_SUBMISSION #description()
     *                YdataError.REPORT_INVALID_SUBMISSION.description()}
     *                </p>
     * @param message a user friendly message which will construct an
     *                {@link ErrorMessage} in error message list.
     */
    public DpRuntimeException(String code, String message) {
        this(new ErrorMessage(code, message));
    }
    
    /**
     * Exception constructor
     * @param error an application error message
     */
    public DpRuntimeException(ErrorMessage error) {
        errors.clear();
        errors.add(error);
    }
    
    /**
     * Exception constructor
     * @param error an application error report which can store multiple errors or
     *              warnings. Quite useful for validation processes.
     */
    public DpRuntimeException(ErrorReport errorReport) {
        this(errorReport.getErrors());
    }
    
    /**
     * Exception constructor
     * @param errors a list of application error messages
     */
    public DpRuntimeException(List<ErrorMessage> errors) {
        this.errors = errors;
    }
    
    /**
     * @see RuntimeException#RuntimeException(String, Throwable)
     */
    public DpRuntimeException(String string, Throwable thrwbl) {
        super(string, thrwbl);
    }
    
    /**
     * @see RuntimeException#RuntimeException(Throwable)
     */
    public DpRuntimeException(Throwable thrwbl) {
        super(thrwbl);
    }
    
    /**
     * @see RuntimeException#RuntimeException(String, Throwable, boolean)
     */
    public DpRuntimeException(String string, Throwable thrwbl, boolean bln,
                              boolean bln1) {
        super(string, thrwbl, bln, bln1);
    }
    
    /**
     * Returns a list of custom application error messages. Those messages may
     * support localisation.
     */
    public List<ErrorMessage> getErrors() {
        return errors;
    }
    
    /**
     * Returns an optional user friendly description of this exception. This
     * description is not stored as an internal member of the inherited
     * {@link RuntimeException} class.
     */
    public String getDescription() {
        return description;
    }
    
    /**
     * Sets an optional user friendly description of this exception. This
     * description is not stored as an internal member of the inherited
     * {@link RuntimeException} class.
     */
    public DpRuntimeException setDescription(String description) {
        this.description = description;
        
        return this;
    }
}
